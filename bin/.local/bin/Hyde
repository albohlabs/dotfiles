#!/bin/env bash

if [ "$(whoami)" = "root" ] || [ "$(id -u)" -eq 0 ]; then
	echo "Oh no! What have you done! Hyde-cli is design for 'user' space ONLY ...EXITING"
	sleep 3 && echo "How to tell idiots that they are. 😉"
	exit 1
fi

export CLI_PATH=$(dirname $(dirname ${0}))
export PATH=$PATH:${CLI_PATH}/lib/hyde-cli/

hyde_cli_version=$(cat ${CLI_PATH}/share/hyde-cli/.hyde-cli.ver | head -1)

. GLOBAL-hyde
. DEVEL-hyde
. FUNCTIONS-hyde

#? Handle Syntax errors
if [ -z "$1" ]; then
	box_me -s "Hyde-cli $hyde_cli_version"
	print_prompt "$(main_help_content)"
	exit 1
elif ! (awk '{print $1}' <<<$(main_help_content) | grep -qw "${1}" ); then
	echo '${*}'
	print_prompt -crit "[unknown]: " -y "$*" "\nUsage: Hyde [Function] [Arguments] [Parameter]\n"
	print_prompt "$(main_help_content)"
	exit 1
fi

initiate_hyde_command &
#! DO NOT USE ANY BASH FORMATTER HERE that NUKES some ';' symbols
#! +----------------------------------------------------------------|
#? Add functions below this section
#? Be careful with spaces in your Function definitions
#? Example Function:
#* |Function example() { #? Example Function. this comments supports '\n'
#? |                       ^^^^ Use use as description and respects
#* | case $1 in
#* |      # Cases go here...
#* |      case1) #? Case description
#? |                ^^^ description for case functions
#* | #* |           commands...
#* | : <<USAGE
#* | [FUNCTION_CASE_USAGE ]
#* | --flags ? Description for flags
#* | --args  ? Desc for args
#* | --parms ? desc for param
#* | [END]
#* | USAGE
#? | ^^^^^^ Usage block is a comment block that will be parsed by gen_completion and man  function
#* |        ;;
#* |
#* |   esac;; <== ' ; ' is also use to parse case conditions
#* |}
#! +----------------------------------------------------------------|

man() { #? Show Manual
	. "${meta_file}" 2>/dev/null || print_prompt -r "Looks like you did not run 'Hyde-install'! "
	manPage=$(
		echo -e "Hyde-cli ${hyde_cli_version}"
		[ -d "${CloneDir}" ] && echo "Hyde Clone Directory: ${CloneDir}"
		echo -e "Usage: Hyde [Function] [options]\n"
		grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
			Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
			desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { gsub(/\\n/, "\\n\t\t\t", $5); print $5 }')
			printf " \n%-45s %s\n\n" "$(print_prompt -y "[" "${Function}" -y "]")" "$(print_prompt -c "﬌" "${desc}")"
			Parameters "${Function}"
		done
	)
	(
		[ "${clean_man}" = true ] || box_me -c 220 "Manual Page"
		echo -e "${manPage}" |
			sed -e "s|\${CloneDir}|$CloneDir|g" \
				-e "s|\${HOME}|${HOME}|g" \
				-e "s|\${hydeConfDir}|${hydeConfDir}|g" \
				-e "s||${hydeConfDir}|g" \
				-e "s|\${ctlFile}|$ctlFile|g"
		barLine
		print_prompt "\nDescriptions with" -y " [*]" " can be expanded to show more information. Append [--help]"
	) | { less || more || cat -; } 2>/dev/null
}

version() { #? Hyde-cli version
	hyde_header
	box_me -s "Hyde-cli version" -c 209
	cat "${usrDir}/.hyde-cli.ver"
	[[ ${CLI_PATH} != *"/usr"* ]] && print_prompt -y "Locally installed by $USER"
	barLine
	{
		. "${meta_file}" 2>/dev/null && box_me -s "Hyde version" -c 209
		repo_info
		barLine
		inform_updates
	} || print_prompt -r "Looks like you did not run 'Hyde-install'! "
}

systeminfo() { #? System information
	echo -e "**Hyde-cli version:**"
	cat "${usrDir}/.hyde-cli.ver"
	[[ ${CLI_PATH} != *"/usr"* ]] && echo "***Locally installed by $USER***"

	echo -e "\n**Hyde repository:**"
	repo_info

	if [ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]; then
		echo -e "\n**Hyprland system information:** (hyprctl)"
		hyprctl systeminfo
	else
		echo -e "\n**GPU:** "
		lspci -nn | grep -Ei "VGA|3d"

		echo -e "\n**CPU:** "
		lscpu | awk -F': ' '/Model name/ {gsub(/^ *| *$| CPU.*/,"",$2); print $2}'

		echo -e "\n**OS:** "
		cat /etc/os-releases
	fi
}

check() { #? Information about Hyde and its components
	case $1 in
	Config) #? [*] Hyde Config File & Directory status
		navigate_clone
		ConfigDir="${CloneDir}/Configs"
		dynamic=(
			".t2"
			".config/dunst/dunstrc"
			".config/qt6ct/colors.conf"
			".config/waybar/config.jsonc"
			".config/waybar/style.css"
			".config/hypr/themes/theme.conf"
			".local/share/dolphin/dolphinstaterc"
			".config/qt6ct/qt6ct.conf"
			".config/qt5ct/qt5ct.conf"
			"/.config/gtk-3.0/settings.ini"
		)
		preserve="$(awk -F'|' '/^P/ {print $2"/" $3}' $ctlFile)"
		wallbash="$(find $hydeConfDir -type f -name "*.theme*" -o -name "*.dcol*" -print0 | xargs -0 head -n 1 | sed '/==>/d;/<==/d' | awk -F '|' '{print $1}')"
		{
			hyde_header
			barLine
			find "$ConfigDir" -type f | while read -r file; do
				relativeFile=$(echo "$file" | sed "s|^$ConfigDir/||")
				targetDir=${HOME}/$(dirname "$relativeFile")
				targetFile=${HOME}/${relativeFile}

				if [ ! -d "$targetDir" ]; then
					print_prompt -b "[missing]" " Directory: $targetDir"
					continue
				fi
				if [ ! -f "${targetFile}" ]; then
					print_prompt -b "[missing]" " File: $targetFile"
					continue
				fi
				if [[ "$(md5sum "${targetFile}" | awk -F ' ' '{print $1}')" != "$(md5sum "${file}" | awk -F ' ' '{print $1}')" ]]; then

					while IFS= read -r line; do
						pFile="$(eval echo "${line}")"
						if [[ ${pFile} = $targetFile ]]; then
							print_prompt -g "[wallbash]" " ${targetFile}"
							# diff -y "${targetFile}" "$file" && barLine
							continue 2
						fi
					done <<<"$wallbash"

					for keyword in "${dynamic[@]}"; do
						if grep -q "$keyword" <<<"$targetFile"; then
							print_prompt -c "[dynamic] " "$targetFile"
							continue 2
						fi
					done
					while IFS= read -r line; do
						pFile="$(eval echo "${line}")"
						if [[ ${pFile} = $targetFile ]]; then
							grep -q -e '--preserve' <<<$@ && barLine
							print_prompt -y "[preserved]" " ${targetFile}" -y " != " "$file"
							grep -q -e '--preserve' <<<$@ && barLine && diff -y --color=always "${targetFile}" "$file" && barLine
							continue 2
						fi
					done <<<"$preserve"
					grep -q -e '--mismatch' <<<$@ && barLine
					print_prompt -crit "[mismatch]" " ${targetFile}" -crit " != " "$file"
					grep -q -e '--mismatch' <<<$@ && barLine && diff -y --color=always "${targetFile}" "$file" && barLine
				fi
			done
		} | {
			grep -q -e '--less' <<<$@ && less ||
				grep -q -e '--clip' <<<$@ && wl-copy ||
				cat -
		}
		barLine
		cat <<NOTE
*mismatch               Mismatched files compared to upstream and not preserved
                            ﯦ  check diff by appending '--mismatch'
*preserve               Inconsistency may occur if preserving files
                            ﯦ  check diff regularly by appending '--preserve'
*wallbash & *dynamic     Constantly changing files
                            ﯦ  pointless to diff
*missing                Missing/not installed files

NOTE
		: <<USAGE
[CHECK_CONFIG_USAGE]
    --mismatch  ?   Diff mismatched dotfiles
    --preserve  ?   Diff preserved dotfiles
    --less  ?   Pipes STDOUT to less
[END]
USAGE
		;;
	Package) #? Hyde core Package status
		# TODO revert this back to a function if needed to be reused like hwo rubiin did.
		navigate_clone
		hyde_header
		# TODO Read the main package list then compare the locally installed packages
		# TODO Should not be hardcoded and should rely on the core packages handled by Hyde-install soon
		pacman -Qe | grep -wE "hyprland|hypr|wayland|rofi|fish|zsh|fastfetch|waybar|swaylock|code|kitty|dunst|nwg-look|eza|lsd" | awk 'BEGIN { printf "%-40s %-35s\n", "Package", "Version"; print "--------------------------------------------------------" }
    { printf "%-40s %-35s\n", $1, $2 }'
		;;
	*) Parameters "${FUNCNAME[0]}" ;;
	esac;

}

control() { #? Interactive control file
	case $1 in
	Config) #? Manage users restore control list
		shift
		navigate_clone
		. Manage-Config
		make_List "${CloneDir}" --edit
		;;
	*) Parameters "${FUNCNAME[0]}" ;;
	esac;

}

branch() { #? Set preavailable Hyde branch
	repo_info
	set_branch
}

update() { #? Pull updates from Hyde repository
	trap 'rm -f "${cacheDir}/landing/update.check"' EXIT
	repo_info
	barLine
	get_aurhlpr
	print_prompt -y "Pulling Hyde repo..."
	git stash >/dev/null
	git pull
	git stash pop 2>/dev/null
	print_prompt -y "Checking Hyde CLI updates..."
	[[ ${CLI_PATH} != *"/usr"* ]] && export HYDE_LOCAL=1
	export HYDE_UPDATE=1 && print_prompt -y "Locally installed by $USER"
	curl -sL https://raw.githubusercontent.com/kRHYME7/Hyde-cli/master/install.sh | bash
	barLine
	inform_updates
}

upgrade() { #? Upgrades dots from the repository
	repo_info
	ask_confirm
	Manage-Config "upgrade"
	rename_backup "_Hyde_upgrade"
}

restore() { #? Restore dots
	navigate_clone
	case $1 in
	Config) #? Only restores dots from default '${CloneDir}/Configs'
		shift
		box_me "Restoring dots"
		repo_info
		# ask_confirm
		. Manage-Config
		make_List
		#  cat ${ctl_override}
		ask_confirm "${USER}"
		./restore_fnt.sh
		Restore-Config --only "${HYDE_RUNTIME_DIR}/"
		set_metadata
		rename_backup "_Hyde_restore_Configs"
		Hyde reload
		;;
	Clone) #? Restores dots from a clone repository \n ﯦ  Provide ~/path/to/clone/directory
		Manage-Config "$1" "$2" && rename_backup "_Hyde_restore_Clone"
		#? Meta is added inside Clone function
		;;

	BackUp) #? Restores dots from previous backup\n !! Files might not be complete\n ﯦ  You can cherry pick a file/dir from a backup
		Manage-Config "${@}"
		;;
	Link) #? Links a clone directory. Useful if you want to change your CloneDir
		repo_info
		set_branch
		shift
		new_CloneDir=${1}
		[[ -z "${1}" ]] && new_CloneDir=${CloneDir} && print_prompt -r "Missing /path/to/CloneDir"
		check_integrity
		print_prompt -y "\n[LINKING]:" "${CloneDir}"
		ask_confirm
		set_metadata "${new_CloneDir}"
		Hyde reload
		;;
	*) Parameters "${FUNCNAME[0]}" ;;
	esac;
}

backup() { #? Backing up commands
	navigate_clone
	case $1 in
	all) #? Backs up the current configuration
		Manage-Config "$1"
		;;
	# custom)
	#     Manage-Config "$1"
	# ;;
	revert) #? Revert to a previous backup run by 'Hyde backup all'. \n ﯦ  different from 'Hyde restore Backup', this command will restore the explicit backups like a snapshot
		Manage-Config "$1"
		;;
	list) #? List the backup
		Manage-Config "list_Backup"
		;;
	clean) #? Clear some storage by deleting old backups
		Manage-Config "$1"
		;;
	*) Parameters "${FUNCNAME[0]}" ;;
	esac;
}

override() { #? Overwrite current dots from the preferred user dir \n ﯦ  see upstream for more info \n ﯦ  add 'userPrefsDir=path/to/user/pref/directory' in\n'${hydeConfDir}/hyde.conf' for custom user path
	source_user
	userPrefsDir=${userPrefsDir:-${HOME}/.config/hyde/user}
	[ ! -d "$userPrefsDir" ] && print_prompt "Undefined user directory, see upstream for more information" && return 1
	print_prompt -r "This will overwrite the current dots with the ones in '${userPrefsDir}'"
	ask_confirm "${USER}"
	# Find all files in the userPrefsDir, remove the directory prefix, and create hard links in $HOME
	find "$userPrefsDir" -type f | while read -r file; do
		# Remove the directory prefix from the file path
		relativePath=$(echo "$file" | sed "s|^$userPrefsDir/||")
		# Extract the directory part of the relative path
		targetDir="$HOME/$(dirname "$relativePath")"
		# Check if the target directory exists, and create it if it doesn't
		if [ ! -d "$targetDir" ]; then
			# mkdir -p "$targetDir"
			echo "$targetDir does not exist... Skipping"
			break
		fi
		# Create the hard link in $HOME
		cp -f "$file" "$HOME/$relativePath"
		print_prompt -g "[Overwrite] " -c " " "$file" -y "  " "$HOME/$relativePath"
	done
}

cache() { #? Manages Hyde's cache
	case $1 in
	reload) #? Reload wallpaper cache
		shift
		# [[ -z ${*} ]] && print_prompt -y "NOTE: Append the 'Theme-Name' to reload specific theme"
		swwwallcache.sh "${@}"
		;;
	rebuild) #? Force rebuild cache
		read -n 1 -s -r -p "[ENTER:yes ANY:no] Force rebuild cache, proceed? " key
		[[ -z "$key" ]] || exit 0
		echo ""
		swwwallcache.sh -f
		;;
		#          wall)
		# :
		#          ;;
	#  theme) #? Generate cache for current theme
	#     swwwallcache.sh -t
	#  ;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;
}

cursor() { #? Cursor setting
	#Case
	enable_package gsettings hyprcursor-util hyprcursor
	cursor_theme=$(gsettings get org.gnome.desktop.interface cursor-theme | sed "s/'//g")
	cursor_size=$(gsettings get org.gnome.desktop.interface cursor-size | sed "s/'//g")

	hlp_msg=false
	[ $# == 0 ] && hlp_msg=true

	while [ "$#" -gt 0 ]; do
		case "$1" in
		theme) #? Set cursor theme
			shift
			cursor_theme="${1:-${cursor_theme}}"
			;;
		size) #? Set cursor size
			shift
			cursor_size=${1:-${cursor_size}}
			;;
		reload) #? Reload cursors
			box_me "Reloading Cursor"
			;;
		info) #? Check active cursor status (only gsettings)
			print_prompt -g "[Theme] " "${cursor_theme}"
			print_prompt -g "[Size] " "${cursor_size}"
			exit 0
			;;
		*)
			hlp_msg=true
			;;
		esac;
		shift
	done

	if [ $hlp_msg = true ]; then
		. FUNCTIONS-hyde
		Parameters "${FUNCNAME[0]}"
		exit 0
	fi

	print_prompt -g "[Theme] " "${cursor_theme}"
	print_prompt -g "[Size] " "${cursor_size}"
	hyprctl setcursor ${cursor_theme} ${cursor_size}
	gsettings set org.gnome.desktop.interface cursor-theme "${cursor_theme}"
	gsettings set org.gnome.desktop.interface cursor-size ${cursor_size}
}

theme() { #? Theme commands
	# Function for managing themes
	case $1 in
	set) #? Set theme
		sel_Theme=$(ls $themeDir | fzf)

		"${scrDir}"/themeswitch.sh -s "$sel_Theme"
		;;
	next) #? Next theme
		"${scrDir}"/themeswitch.sh -n
		;;
	prev) #? Previous theme
		"${scrDir}"/themeswitch.sh -p
		;;
	select) #? Theme selector
		"${scrDir}"/themeselect.sh
		;;
	patch) #? Patch a theme from different repository.\nﯦ Invoking without args will launch a menu from Hyde-gallery DB
		shift
		navigate_clone
		if [[ -z "${*}" ]]; then
			Manage-Themes theme_patcher
		else
			#! ./themepatcher.sh "$@" #! This is from the repo,Decided to maintain a separate patcher
			Patch-Theme "$@"
		fi
		;;
	# remove) #? Removes a theme from the system !!  Unrecoverable
	# :

	# ;;
	*) Parameters "${FUNCNAME[0]}" ;;

	esac;
}

wallpaper() { #? Wallpaper commands
	case $1 in
	set) #? Set /Path/to/Wallpaper
		print_prompt +r "[deprecated] " +y "add 'wallAddCustomPath=( \"path/to/wallpapers\" \"...\" )' in '${hydeConfDir}/hyde.conf' instead"
		shift
		# cd - || exit
		if [[ -z "${*}" ]] ; then echo "Missing /Path/to/Wallpaper: ${*}" ; exit 1 ; fi
		"${scrDir}"/swwwallpaper.sh -s "${1}"
		;;
	next) #? Next wallppaer
		"${scrDir}"/swwwallpaper.sh -n
		;;
	prev) #? Previous wallpaper
		"${scrDir}"/swwwallpaper.sh -p
		;;
	select) #? Wallpaper selector
		"${scrDir}"/swwwallselect.sh
		;;
	variety) #? [*] Use variety package to manage wallpapers\nﯦ Add 'exec-once=Hyde wallpaper variety' in ./userprfs.conf 
		shift
		Run-Wallpaper "${@}"
		: <<USAGE
[WALLPAPER_VARIETY_USAGE]
    --reset ? reset hyde profile
[END]
USAGE
	;;
	*) Parameters "${FUNCNAME[0]}" ;;

	esac;
}

wallbash() { #? Toggle to use wallpaper accent themes
	case $1 in
	toggle) #? Cycles wallbash [0] off [1] auto [2] dark [3] light
		"${scrDir}/wallbashtoggle.sh"
		;;
	mode) #? [*] Set wallbash mode. [0] [1] [2] [3] \nﯦ no args spawns a menu
		shift
		num_val=${1}
		[ -z "${num_val}" ] && "${scrDir}"/wallbashtoggle.sh -m && return 0
		declare -A actionMap=(
			[0]="wallbash disabled"
			[1]="wallbash auto"
			[2]="wallbash dark mode"
			[3]="wallbash light mode"
		)
		# TgtScr="$scrDir/globalcontrol.sh"
		TgtScr="${hydeConfDir}/hyde.conf"

		if [[ -n "${actionMap[$num_val]}" ]]; then
			sed -i "/^enableWallDcol/c\enableWallDcol=${num_val:-${enableWallDcol}}" "${TgtScr}"
			. "$scrDir/globalcontrol.sh"
			notif="${actionMap[$num_val]}"
			echo "$notif"
		else
			echo "Invalid numeric value: $num_val"
			exit 0
		fi
		"${scrDir}/swwwallbash.sh" "$(readlink "${hydeThemeDir}/wall.set")"
		notify-send -a "t1" -i "~/.config/dunst/icons/hyprdots.png" "${notif}"
		: <<USAGE
[WALLBASH_MODE_USAGE]
    0  ? wallbash disabled
    1  ? wallbash auto
    2  ? wallbash dark mode
    3  ? wallbash light mode
[END]
USAGE
		;;

	# # term) #? Toggle terminal colors into some presets
	# #   Manage-Wallbash "${@}"
	# # ;;
	# # kitty) #? Toggle 'kitty'
	#     Manage-Wallbash "${@}"
	# # ;;
	# # waybar) #? Toggle 'waybar'
	#     Manage-Wallbash "${@}"
	# # ;;
	# # spotify) #? Toggle 'spotify'
	#     Manage-Wallbash "${@}"
	# # ;;
	*) Parameters "${FUNCNAME[0]}" ;;
	esac;
}

waybar() { #? Waybar commands
	# case this is use to trick the parser that we are in case statement
	waybar_ctl=${HOME}/.config/waybar/config.ctl
	ACTION="notify-send -a \"Hyde\" \"Waybar Updated\" ; ${scrDir}/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
	case $1 in
	control) #? Edit waybar control file
		ConfigCtl "${waybar_ctl}" "$ACTION"
		;;
	next) #? Next waybar layout
		${scrDir}/wbarconfgen.sh n
		;;
	prev) #? Previous waybar layout
		${scrDir}/wbarconfgen.sh p
		;;
	reload) #? Reloads waybar
		eval "${ACTION}"
		;;
	size) #? [*] Set waybar size\nﯦ e.g 'waybar size 30' (range 1-100)
		shift
		wbar_size=${1}
		all=${2}
		if [ -z "${wbar_size}" ] || [[ $wbar_size =~ ^[0-9]+$ && $wbar_size -ge 1 && $wbar_size -le 100 ]]; then
			if [[ "${all}" == "--all" ]]; then
				# TODO I can't make sed do the work so awk for now.
				# sed -i "s/^\([01]|\)\([0-9]*|\)\?/1|${wbar_size}|/" "${waybar_ctl}"
				awk -v new_size="${wbar_size}" 'BEGIN{FS=OFS="|"} { $2 = new_size } 1' "${waybar_ctl}" >temp_file && mv temp_file "${waybar_ctl}"
			else
				sed -i "s/^\(1|\)\([0-9]*|\)\?/1|${wbar_size}|/" "${waybar_ctl}"
			fi

			eval "${ACTION}"
		else
			print_prompt +r "Error: " "Valid scaling from 1-100"
			exit 1
		fi
		: <<USAGE
[WAYBAR_SIZE_USAGE]
    --all ? Change all the pre-set sizes
[END]
USAGE
		;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;
}

sddm() { #? Sddm commands

	. Manage-Sddm
	enable_package sddm
	case $1 in
	install) #? Install and set sddm theme from HyDE clone Repo
		navigate_clone
		sddm_install "${@}"
		;;
	list) #? List all local sddm themes
		sddm_list_local
		;;
	  set) #? Set Sddm theme from the list
	  	shift
		sddm_set_local "${@}"
	  ;;
	*) Parameters "${FUNCNAME[0]}" ;;

	esac;
}

shell() { #? Shell commands

	case $1 in
	select) #? Shell selector
		shell_select
		;;

	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;
}

power() { #? Power Options

	case $1 in
	reset) #? Reset changes
		Manage-Power "$@"
		;;
	save) #? [*] Save power by disabling features
		Manage-Power "$@"
		: <<USAGE
[POWER_SAVE_USAGE]
    --animations    ? Disable animations
    --borderangle   ? Disable border angle animation
    --blur          ? Disable blur
    --opacity       ? Disable tranparency
[END]
USAGE
		;;
	toggle) #? Toggle ﯦ  Set/unset current changes'
		Manage-Power "$@"
		;;
	unset) #? [*] Unset specific changes
		Manage-Power "$@"
		: <<USAGE
[POWER_UNSET_USAGE]
    --animations    ? Default animations
    --borderangle   ? Default border angle animation
    --blur          ? Default blur
    --opacity       ? Default tranparency
[END]
USAGE
		;;
	game) #? Toggle game mode
		Manage-Power "$@"
		;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;

}

code() { #? Code editor related commands 
	case $1 in
	# select) #! Selector for default Theme presets

	# 	code_setting="${confDir}"/Code/User/settings.json

	# 	select_theme() {
	# 		dir=$(grep "^1|" "${ThemeCtl}" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
	# 		code_SubExt=$(cat ${HOME}/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label' | fzf)
	# 		awk -v ext="${code_SubExt}" -F'|' 'BEGIN {OFS = FS} /^1\|/ {if ($3 ~ /~/) sub(/~[^|]*/, "~" ext, $3); else $3 = $3 "~" ext} 1' "$ThemeCtl" >temp && mv temp "$ThemeCtl"
	# 		if [ "$(grep -c "workbench.colorTheme" "${code_setting}")" -eq 1 ]; then
	# 			sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${code_setting}"
	# 		else
	# 			sed -i "/^{/a\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${code_setting}"
	# 		fi
	# 	}
	# 		select_theme
	# 	;;
	theme) #? set the code theme
		shift

		help () {
		cat << HELP
Provide a valid code theme name.
No args passed will default to 'wallbash'  code theme
HELP
		}
	   codet=${*:-wallbash}
	   [[ "$*" == "-"* ]] && { help ; exit 1; }
		readarray -t codeConf < <(find "${confDir}" -mindepth 1 -maxdepth 1 -type d -name "Code*" -o -name "VSCodium*" | sort)
		print_prompt -y "Setting '${codet}' as code theme..." 
		for i in "${!codeConf[@]}" ; do
		    [ -f "${codeConf[i]}/User/settings.json" ] || continue
    		jq --arg codet "${codet}" '.["workbench.colorTheme"] |= $codet' "${codeConf[i]}/User/settings.json" > tmpvsc && mv tmpvsc "${codeConf[i]}/User/settings.json"
		done
	;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;
}

show() { #? Useful GUI util
	case $1 in
	# monitors) #? Manages monitors using nwg-displays
	#     Manage_Monitor
	# ;;
	binds) #? [*] Show keybind hints\n ﯦ  Click to execute
		# Keybinds_Hint #! Moved to .extra
		shift
		diff "${etcDir}/keybinds_hint.sh" "${scrDir}/keybinds_hint.sh" > /dev/null || \
		print_prompt +b "\n[changes available] " "copy '"${etcDir}/keybinds_hint.sh"' to '${scrDir}/keybinds_hint.sh' to update your keybinds_hint.sh" 
		"${scrDir}"/keybinds_hint.sh "${@}"
		: <<USAGE
[SHOW_BINDS_USAGE]
    -j   ?  Show the JSON format
    -p   ?  Show the pretty format
    -d   ?  Add custom delimiter symbol (default '>')
    -f	<PATH>   ?  Add custom .conf file
    -h   ?  Display this help message
[END]
USAGE
		;;
	bookmarks) #? [*] Bookmark selector\nﯦ append 'bookmark_file=("/path/to/bookmarks.lst")' line inside '${hydeConfDir}/hyde.conf'
		shift
		Launch-Bookmarks "${@}"
		: <<USAGE
[SHOW_BOOKMARKS_USAGE]
    --browser	<PACKAGE> ?   Set Browser can also set 'BROWSER' env
    --no-custom ?    run without custom '.lst' bookmark files
    --persist	?	Saves bookmark file list to ~/.cache.So no re-caching after reboot
    --rasi	<PATH>?	set rofi configuration
    --rebuild   ?   force rebuild cached bookmark paths
[END]
USAGE
		;;
	calc) #? [*] Calculator (libqalculate)  
	shift
	Launch-Calculator "${@}" 
		: <<USAGE
[SHOW_CALC_USAGE]
    --rasi	<PATH>? set rofi configuration
    --reset ?	Reset cache
[END]
USAGE
	;;
	emoji) #? [*] Emoji selector\nﯦ Add 'emoji_style=2'\n	1 = list\n	2 = grid    
		shift
		Launch-Emoji "${@}"
		: <<USAGE
[SHOW_EMOJI_USAGE]
    --style   ?   use style [ 1 | 2 ]
    --rasi	<PATH>?	set rofi configuration
[END]
USAGE
		;;
	glyph) #? Glyph selector
		Launch-Glyph
		;;
	pastebin) #? [*] Pastebin manager \n ﯦ  pass [only once] '--ignore=initialclass' to disable autopaste
		[[ $* == *"--ignore"* ]] && pasteIt "${*}"
		shift
		Launch-Pastebin "$@"
		: <<USAGE
[SHOW_PASTEBIN_USAGE]
    --copy  ?	list and copy selected
    --delete  ?	list and delete selected
    --wipe  ?	wipe database
    --option  ?	options
[END]
USAGE
		;;
	screencap) #? Use rofi to select screenshot options \n !!  kills another rofi session
		Launch-Screencap
		;;
	search) #? [*] Web Search\nﯦ supports shorthand e.g 'g: some thing' (this uses google.com to search for 'some thing')\nﯦ ':' is use as delimter\nﯦ Custom search-engines should be in 'search.lst' and be declared inside ./hyde.conf ( e.g search_file="$HOME/.config/hyde/search.lst" ) 

	shift
		Launch-Search "${@}"
		: <<USAGE
[SHOW_SEARCH_USAGE]
    --reset ?	Reset cache
    --browser  ? Browser to use
    --site  ? Search engine to use
    --rasi	<PATH>? set rofi configuration
[END]
USAGE
		;;
	*)
		Parameters "${FUNCNAME[0]}"
		# Launch-Search -h
		;;
	esac;
}

run() { #? Executable utilities
	case $1 in

	airplane_mode) #? Toogle airplane mode\n\tﯦ Toogles wifi 
	airplane-mode
	;;
	audio_idle) #? Inhibits idle when player status: 'Playing
		enable_package systemd
		local command="${0} "${FUNCNAME[0]}" ${@} --listen"
		shift
		[ "--listen" = "$1" ] && while playerctl status | grep -q "Playing"; do sleep 5; done && exit
		playerctl status | grep -q "Playing" && systemd-inhibit --what=idle --mode=block ${command}
		print_prompt -y "Player status: " " $(playerctl status)..."
		;;
	screencap) #? [*] Screenshot and screenrecord tool
		shift
		Run-Screencap "$@"
		: <<USAGE
[RUN_SCREENCAP_USAGE]
    --print-all     ?  Print all outputs
    --record-focus  ?  Record focused monitor
    --print-snip    ?  Drag to manually snip an area
    --record-snip   ?  Drag to manually snip an area to screen record it
    --freeze        ?  Frozen screen, drag to manually snip an area
    --print-monitor ?  Print focused monitor
    --scan          ?  Use 'tesseract' to scan image then add to clipboard
    --stop          ?  Stop every instance of Screencap
    --reset         ?  Reinitialize screencap
[END]
USAGE
		;;
	events) #? Watches hyprland events and executes actions
		enable_package
		shift
		verbose=0
		event_config=""
		while [ "$#" -gt 0 ]; do
			case "$1" in
			--verbose)
				export verbose=1
				shift
				;;
			--config)
				export event_config="$2"
				shift 2
				;;
			*)
				echo "Unknown option: $1"
				exit 1
				;;
			esac;
		done
		Hypr-Events
		;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;

	esac;

}

inject() { #? User/Device specific scripts that might be useful

	case $1 in
	asus_patch) #? Fixes issues for asus devices
		# Add Keys of asus repository
		SUPER pacman-key --recv-keys 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
		SUPER pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
		SUPER pacman-key --lsign-key 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
		SUPER pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35

		# Add in pacman.conf
		echo -e "\n[g14]\nServer = https://arch.asus-linux.org" | SUPER tee -a /etc/pacman.conf

		enable_package asusctl supergfxctl rog-control-center power-profiles-daemon

		#Check First before enabling
		enable_service power-profiles-daemon.service supergfxd
		;;
	chaotic_aur) #? [*] Add chaotic aur to you mirror
		shift
		SUPER ${CLI_PATH}/lib/hyde-cli/Install-chaotic-aur "${@}"
		: <<USAGE
[INJECT_CHAOTIC_AUR_USAGE]
    --install ? Setup Chaotic Aur, append [fresh] to run in fresh install mode
    --uninstall ? Removes Chaotic Aur
    --revert  ? Converts chaotic aur packages to AUR
[END]
USAGE
		;;
	flatpak) #? Flatpak setup for HyDE
		enable_package flatpak
		flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
		# flats=$(awk -F '#' '{print $1}' "${baseDir}/custom_flat.lst" | sed 's/ //g' | xargs)

		# flatpak install --user -y flathub ${flats}
		# flatpak remove --unused
		gtkTheme=$(gsettings get org.gnome.desktop.interface gtk-theme | sed "s/'//g")
		gtkIcon=$(gsettings get org.gnome.desktop.interface icon-theme | sed "s/'//g")

		flatpak --user override --filesystem=~/.themes
		flatpak --user override --filesystem=~/.icons

		flatpak --user override --env=GTK_THEME=${gtkTheme}
		flatpak --user override --env=ICON_THEME=${gtkIcon}
		;;
	*)
		Parameters "${FUNCNAME[0]}"
		;;
	esac;

}

reload() { #? Just reload
	if printenv HYPRLAND_INSTANCE_SIGNATURE &>/dev/null; then
		box_me "Reloading Dots"
		"$HOME/.local/share/bin/swwwallcache.sh" -t ""
		{ [ -n "$hydeTheme" ] && "${scrDir}/themeswitch.sh" -s "$hydeTheme"; } || "${scrDir}/swwwallcache.sh"
	fi
}

#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|
